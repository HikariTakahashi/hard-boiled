#include <Arduino.h>
#include <stdarg.h>
#include <stdio.h>

#include "WiFiS3.h"
#include <WebSocketsClient.h>

// Wifiアドレス
#define WIFI_SSID ""
#define WIFI_PASS ""

// 超音波センサ
#define TRIG_PIN 2
#define ECHO_PIN 3

WebSocketsClient webSocket;

unsigned long lastMessageTime = 0;
const unsigned long messageInterval = 1000; // 1秒間隔

// WebSocket接続
void webSocketEvent(WStype_t type, uint8_t *payload, size_t length) {
  switch (type) {
    case WStype_DISCONNECTED:
      Serial.println("[WSc] Disconnected!");

      webSocket.begin("192.168.100.5", 8080);
      break;
    case WStype_CONNECTED:
      Serial.println("[WSc] Connected!");
      break;
    case WStype_TEXT:
      Serial.print("[WSc] Received text: ");
      Serial.println((char *)payload);
      break;
    case WStype_BIN:

      break;
    case WStype_ERROR:
    case WStype_FRAGMENT_TEXT_START:
    case WStype_FRAGMENT_BIN_START:
    case WStype_FRAGMENT:
    case WStype_FRAGMENT_FIN:
      break;
  }
}

void setup() {
  Serial.begin(115200);

  while (!Serial) {
    ;  // wait for serial port to connect. Needed for native USB port only
  }

  for (uint8_t t = 4; t > 0; t--) {
    Serial.println("[SETUP] BOOT WAIT ...");
    Serial.flush();
    delay(1000);
  }

  // WiFi接続
  if (WiFi.status() == WL_NO_MODULE) {
    Serial.println("Communication with WiFi module failed!");

    while (true)
      ;
  }

  String fv = WiFi.firmwareVersion();
  if (fv < WIFI_FIRMWARE_LATEST_VERSION) {
    Serial.println("Please upgrade the firmware");
  }

  Serial.println("[Wifi]: Connecting");

  int status = WL_IDLE_STATUS;

  while (status != WL_CONNECTED) {
    Serial.print("[Wifi]: Attempting to connect to SSID: ");
    Serial.println(WIFI_SSID);

    status = WiFi.begin(WIFI_SSID, WIFI_PASS);

    delay(1000);
  }

  Serial.println("Connected!");

  IPAddress ip = WiFi.localIP();
  Serial.print("IP Address: ");
  Serial.println(ip);

  // server.jsを起動したパソコンのローカルIPアドレスを入力
  webSocket.begin("192.168.100.5", 8080);

  webSocket.onEvent(webSocketEvent);

  // try every 5000 again if connection has failed
  webSocket.setReconnectInterval(5000);

  // 超音波センサ
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);
}

void loop() {
  webSocket.loop();

  unsigned long currentTime = millis();
  if (currentTime - lastMessageTime >= messageInterval) {

    long duration, distance;
    
    digitalWrite(TRIG_PIN, LOW);
    delayMicroseconds(2);
    
    digitalWrite(TRIG_PIN, HIGH);
    delayMicroseconds(10);
    digitalWrite(TRIG_PIN, LOW);
    
    duration = pulseIn(ECHO_PIN, HIGH);
distance = (duration / 2) / 29.1;
    
    distance += 80;
    
    String distanceStr = String(distance);
    
    // WebSocketに送信
    webSocket.sendTXT(distanceStr);
    
    lastMessageTime = currentTime;
  }
}
